parameters:
    - name: VmImage
      type: string
      default: 'ubuntu-latest'
    - name: Environment
      type: string
      values:
          - Integration
          - Test
          - Production
    - name: StageShort
      type: string
      values:
          - int
          - test
          - prod
    - name: ServiceConnectionName
      type: string
    - name: ProjectName
      type: string
    - name: DeployBicep
      type: boolean
      default: false
    - name: Sites
      type: object
    - name: StatusState
      type: string
    - name: StatusDescription
      type: string

jobs:
    - deployment: Deploy
      displayName: 'Deploy'
      environment: ${{ parameters.Environment }}
      pool:
          vmImage: ${{ parameters.VmImage }}
      strategy:
          runOnce:
              deploy:
                  steps:
                      - download: ci
                        displayName: 'Download Artifact'
                        artifact: drop

                      - pwsh: |
                          $hasPR = Test-Path pr.txt
                          Write-Host "##vso[task.setvariable variable=hasPR;]$hasPR"
                          if ($hasPR) {
                            $pr = Get-Content -Raw pr.txt
                            $pr = $pr.replace("`n","").replace("`r","")
                            Write-Host "##vso[task.setvariable variable=pr;]$pr"
                            Write-Host "PR number is $pr"
                            # Base64 encode the Personal Access Token 
                            $url = "https://dev.azure.com/Devdeer/AssetsManager/_apis/git/repositories/AssetsManager/pullRequests/" + $pr + "?api-version=7.0"
                            $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$(PAT)"))
                            $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
                            $headers.Add('Authorization',('Basic {0}' -f $base64AuthInfo))
                            $response = Invoke-RestMethod -Uri $url -Method Get -Headers $headers -ContentType application/json
                            $status = $response.status
                            if ($status -ne "active") {
                              $hasPR = $false
                              Write-Host "##vso[task.setvariable variable=hasPR;]$hasPR"
                              Write-Host "hasPR is $hasPR"
                            }
                          }
                        displayName: 'Checking for PR trigger and reading PR'
                        workingDirectory: $(Pipeline.Workspace)/ci/drop

                      - template: "preparation.yml"
                        parameters: 
                          DeployBicep: ${{ parameters.DeployBicep }}
                      - template: "infrastructure.yml"
                        parameters:
                          StageShort: ${{ parameters.StageShort }}
                          ServiceConnectionName: ${{ parameters.ServiceConnectionName }}
                          DeployBicep: ${{ parameters.DeployBicep }}
                      - ${{ each site in parameters.Sites }}:
                            - template: "deployment-azure.yml"
                              parameters:
                                StageShort: ${{ parameters.StageShort }}
                                ServiceConnectionName: ${{ parameters.ServiceConnectionName }}
                                ProjectName: ${{ parameters.ProjectName }}
                                Site: ${{ site }}
                                StatusState: ${{ parameters.StatusState }}
                                StatusDescription: ${{ parameters.StatusDescription }}

                      - task: PowerShell@2
                        displayName: 'Finish CD state'
                        timeoutInMinutes: 1
                        inputs:
                          targetType: filePath
                          filePath: '$(Pipeline.Workspace)/ci/drop/pipeline-scripts/set-ado-prstate.ps1'
                          arguments: '-CollectionUri $(System.CollectionUri) -ProjectName $(System.TeamProject) -Token $(PAT) -PullRequestId $(pr) -StatusState "Succeeded" -StatusDescription ""'
                          pwsh: true
                          workingDirectory: '$(Pipeline.Workspace)/ci/drop/pipeline-scripts'
                        condition: and(eq(variables['Agent.JobStatus'], 'Succeeded'), eq(variables['hasPR'], 'True'), eq('${{ parameters.StageShort }}', 'prod'))