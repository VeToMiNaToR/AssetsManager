@using devdeer.AssetsManager.Logic.Ui.Extensions
@using devdeer.AssetsManager.Logic.Ui.Models
@using devdeer.AssetsManager.Logic.Ui.Services
@implements IDisposable
@inject IServiceProvider ServiceProvider

<EditForm EditContext="@_context">
    <DataAnnotationsValidator />
    <ValidationMessage For="() => CurrentAsset.Key" />
    <MudGrid>
        <MudItem xs="12" Class="pa-4">
            <MudCard>
                <MudCardContent>
                    @* <MudTextField Label="Key" @bind-Value="CurrentAsset.Key" For="@(() => CurrentAsset.Key)" /> *@
                    <MudTextField Label="Model" @bind-Value="CurrentAsset.Model" For="@(() => CurrentAsset.Model)" />
                    <MudDatePicker Label="Aquisition" @bind-Date="CurrentAsset.Aquisition" For="@(() => CurrentAsset.Aquisition)" Editable="true" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton OnClick="OnCancel">Abbrechen</MudButton>
                    <MudButton Color="Color.Primary" @onclick="OnSubmit">OK</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    private EditContext? _context;
    private ValidationMessageStore? _messageStore;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        _context = new EditContext(CurrentAsset);
        _messageStore = new ValidationMessageStore(_context);
        base.OnInitialized();
    }

    /// <summary>
    /// Method to change the currently used data item on the edit context.
    /// </summary>
    /// <param name="model">The item to edit in this instance.</param>
    public void SetContext(AssetDialogModel model)
    {
        CurrentAsset = model;
        _context = new EditContext(CurrentAsset);
        _context.EnableDataAnnotationsValidation(ServiceProvider);
        _context.OnValidationRequested += OnOnValidationRequested;
        _context.OnFieldChanged += (s, e) =>
        {
            _messageStore?.Clear(e.FieldIdentifier);
        };
        StateHasChanged();
    }

    private void OnOnValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        _messageStore?.Clear();
        if (string.IsNullOrEmpty(CurrentAsset.Key))
        {
            return;
        }
        var service = ServiceProvider.GetRequiredService<AssetService>();
        var ok = service.GetKeyExistsAsync(CurrentAsset.Key)
            .GetAwaiter()
            .GetResult();
        if (ok)
        {
            // TODO: THIS WORKS but the form is not reacting to it 😒
            _messageStore?.Add(() => CurrentAsset.Key, "This key already exists");
        }
    }

    public void Dispose()
    {
        if (_context is not null)
        {
            _context.OnValidationRequested -= OnOnValidationRequested;
        }
    }

    /// <summary>
    /// Calls closing logic without doing anything.
    /// </summary>
    void OnCancel()
    {
        OnDone?.Invoke(false);
    }

    /// <summary>
    /// Handler for the submit button.
    /// </summary>
    private async void OnSubmit()
    {
        if (_context?.Validate() ?? false)
        {
            var service = ServiceProvider.GetRequiredService<AssetService>();
            await service.CreateAsync(CurrentAsset.ToModel());
            OnDone?.Invoke(true);
        }
    }

    /// <summary>
    /// The data to bind..
    /// </summary>
    public AssetDialogModel CurrentAsset { get; private set; } = new();

    /// <summary>
    /// Defines the callback to invoke when the form can be closed.
    /// </summary>
    public Action<bool>? OnDone { get; set; }

}