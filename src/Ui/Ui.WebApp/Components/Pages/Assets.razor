@page "/assets"
@using System.Net
@using System.Text.Json
@using System.Text.Json.Serialization
@using devdeer.AssetsManager.Logic.Models
@using devdeer.AssetsManager.Ui.WebApp.Components.Dialogs
@inject HttpClient HttpClient
@inject IDialogService DialogService
@attribute [StreamRendering]

<PageTitle>Assets</PageTitle>
<div class="d-flex">
    <div class="d-flex flex-grow-1">
        <MudText Typo="Typo.h6">Inventar</MudText>
    </div>
    <div class="d-flex">
        <MudButton @onclick="OnNew" Variant="Variant.Filled" Color="Color.Primary">
            New
        </MudButton>
    </div>
</div>

<MudTable Items="@_elements" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" @ref="_table">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Image</MudTh>
        <MudTh>AssetKey</MudTh>
        <MudTh>Availability</MudTh>
        <MudTh>Ownership</MudTh>
        <MudTh>Brand</MudTh>
        <MudTh>Serial No</MudTh>
        <MudTh>Location</MudTh>
        <MudTh>Workplace</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Image">
            <MudImage Height="48" Src="@(context.PrimaryImagePath ?? "https://placehold.co/48?text=_")"></MudImage>
        </MudTd>
        <MudTd DataLabel="AssetKey">@context.AssetKey</MudTd>
        <MudTd DataLabel="Availability">@context.Availability</MudTd>
        <MudTd DataLabel="Ownership">@context.Ownership</MudTd>
        <MudTd DataLabel="Brand">@context.Brand?.Label</MudTd>
        <MudTd DataLabel="Serial No">@context.SerialNumber</MudTd>
        <MudTd DataLabel="Location">@(context.Location?.Label ?? "?")</MudTd>
        <MudTd DataLabel="Workplace">@(context.Workplace?.Label ?? "?")</MudTd>
    </RowTemplate>
</MudTable>
<MudDrawer @bind-Open="@_isDialogOpen"
           ClipMode="DrawerClipMode.Always"
           Width="500px"
           Elevation="0"
           Anchor="Anchor.End"
           Fixed="true"
           Variant="DrawerVariant.Persistent"
           DisableOverlay="true">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Asset</MudText>
    </MudDrawerHeader>
    <AssetDialog @ref="_dialog" />
</MudDrawer>

@code {

    private bool _loading;
    private AssetModel[] _elements = [];
    private bool _isDialogOpen;
    private AssetDialog? _dialog;
    private int _selectedRowNumber = -1;
    private AssetModel? _selectedAsset;
    private MudTable<AssetModel> _table = default!;

    protected override async Task OnInitializedAsync()
    {
        await ReloadAsync();
    }

    /// <summary>
    /// Reloads the list of employees.
    /// </summary>
    private async Task ReloadAsync()
    {
        _loading = true;
        var response = await HttpClient.GetAsync("Asset");
        if (response.StatusCode == HttpStatusCode.NotFound)
        {
            _elements = [];
            _loading = false;
            return;
        }
        response.EnsureSuccessStatusCode();
        var content = await response.Content.ReadAsStringAsync();
        _elements = JsonSerializer.Deserialize<AssetModel[]>(
            content,
            new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                Converters =
                {
                    new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
                }
            }) ?? [];
        _loading = false;
    }

    /// <summary>
    /// Is called to ensure that the dialog is prepared.
    /// </summary>
    private void HookDialog()
    {
        if (_dialog == null)
        {
            return;
        }
        if (_dialog.OnDone == null)
        {
            _dialog.OnDone = success =>
            {
                _isDialogOpen = false;
                StateHasChanged();
                if (success)
                {
                    ReloadAsync()
                        .ContinueWith(
                            t =>
                            {
                                _selectedAsset = null;
                                InvokeAsync(StateHasChanged);
                            });
                }
            };
        }
        _dialog.SetModel(_selectedAsset ?? new AssetModel());
    }

    /// <summary>
    /// Is called when the table needs to format the row depending on the selection state.
    /// </summary>
    /// <param name="dataItem">The item represented by the row.</param>
    /// <param name="rowNumber">The offset of the row.</param>
    /// <returns>The css class definition for the row.</returns>
    private string SelectedRowClassResolver(AssetModel dataItem, int rowNumber)
    {
        if (_table.SelectedItem != null && _table.SelectedItem.Equals(dataItem))
        {
            _selectedRowNumber = rowNumber;
            _selectedAsset = dataItem;
            return "selected";
        }
        return string.Empty;
    }

    /// <summary>
    /// Opens the dialog to create a new employee.
    /// </summary>
    private void OnNew()
    {
        HookDialog();
        _isDialogOpen = true;
    }

}